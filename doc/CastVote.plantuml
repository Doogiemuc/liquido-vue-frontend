@startuml

actor Voter order 10
participant Server order 30
database DB order 40

== Register for voting in an area ==

Voter -> Server : ""GET /voterToken?area=<area.id>""

Server -> Server : ""voterToken=hash(""\n""  user.id,""\n""  user.password,""\n""  area.id,""\n""  salt)""


database DB
Server -> DB : ""insert checksum=hash(voterToken)""\n""into ValidTokens"" 

Voter <-- Server : ""return voterToken for this area""

|||

== Anonymously cast a vote ==

Voter -> Server : ""POST /polls/<id>/castVote""\n""{voterToken, voterOrder}""

Server -> DB : ""query for checksum=hash(voterToken)""\n""in ValidTokens""

alt IF voterToken is valid

  Server -> DB : ""upsert voteOrder""\n""of hash(voterToken)""\n""in Ballots""

  loop for each delegee of a proxy
    Server -> DB : ""query for checksum=hash(delegatedVoterToken)""\n""in ValidTokens""
    Server -> DB : ""upsert voteOrder""\n""of hash(delegatedVoterToken)""\n""in Ballots""
  end

  Voter <-- Server : ""return HTTP 200 Ok""
  |||
else Any token was not allowed to vote
  
  Voter <-- Server : ""return HTTP 401 Forbidden""
  |||

end


||50||

== Assign proxy in area ==

Voter -> Server : ""assignProxy(proxy, area, voterToken)""

Server -> Server : ""proxyToken = hash(""\n""  voterToken""\n""  proxy.id""\n""  salt)""

Server -> DB : ""insert (fromUser, toProxy, area)""\n""into Delegations""

Server -> DB : ""insert checksum=hash(proxyToken)""\n""into ValidTokens"" 

|||

== Remove proxy ==

Voter -> Server : ""removeProxy(proxy, area, voterToken)""

Server -> Server : ""proxyToken = hash(""\n""  voterToken""\n""  proxy.id""\n""  salt)""

Server -> DB : ""delete (fromUser, toProxy, area)""\n""from Delegations""

Server -> DB : ""delete checksum=hash(proxyToken)""\n""from ValidTokens"" 



@enduml

