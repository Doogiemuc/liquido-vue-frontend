@startuml

actor Voter order 10
participant Server order 30
database DB order 40

== Register for voting in an area ==

Voter -> Server : ""GET /my/voterToken/<area.id>""

Server -> Server : create Voter Token\n""voterToken = hash(user.id, user.secret, area.id, salt)""

database DB
Server -> DB : and store right to vote\n""upsert rightToVote = hash(voterToken, seed)""

Server -> DB : (optionally) becomePublicProxy()

Voter <-- Server : return voterTokens for this area

|||

== Anonymously cast a vote ==

Voter -> Server : Anonymous request\n""POST /castVote""\n""{poll, voterToken, List voterOrder}""

Server -> DB : Validate voter token\n""query for rightTovote = hash(voterToken, seed)""

DB --> Server : return valid rightToVote (if found)

loop castVoteRec()

  Server -> Server: ""checkBallot""

  alt If a ballot with that rightToVote and a smaller level does NOT exist
    Server -> DB : store ballot for (delegated) rightToVote on level N\n""upsert ballot(poll, level, voteOrder, rightToVote)""

  else If ballot with smaller level exists
    note over Server
      Do not touch existing ballot with smaller level.
    end note

  else If ballot is invalid
    Voter <-- Server : ""return HTTP 404 Bad request""
  end

  Server -> Server : recursively check delegated rightToVotes on level N+1

end

Voter <-- Server : ""return HTTP 201 (Created) {ballot, voteCount}""

|||

== Validate own ballot ==

Voter -> Server: ""GET /polls/<poll.id>/verify?ballotChecksum=<checksum>""

Server -> DB : find Ballot with checksum

DB --> Server : return ballot (if found)

Server -> Voter : ""return found ballot or 404 (Not Found)""


||50||

== Assign proxy in area ==

Voter -> Server : ""assignProxy(proxy, area, voterToken)""

Server -> Server : ""proxyToken = hash(""\n""  voterToken""\n""  proxy.id""\n""  salt)""

Server -> DB : ""insert (fromUser, toProxy, area)""\n""into Delegations""

Server -> DB : ""insert checksum=hash(proxyToken)""\n""into ValidTokens""

|||

== Remove proxy ==

Voter -> Server : ""removeProxy(proxy, area, voterToken)""

Server -> Server : ""proxyToken = hash(""\n""  voterToken""\n""  proxy.id""\n""  salt)""

Server -> DB : ""delete (fromUser, toProxy, area)""\n""from Delegations""

Server -> DB : ""delete checksum=hash(proxyToken)""\n""from ValidTokens""



@enduml

